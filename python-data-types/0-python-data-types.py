# Python — язык программирования со строгой динамической типизацией.

# «Строгая» означает, что язык не производит неявные преобразования типов и не создаёт сюрпризов при их случайном смешении.
# «Динамическая» означает, что типы объектов определяются в процессе исполнения программы (runtime). 
# Поэтому питонисты могут не указывать типы переменных. 
# Переменные в Python — это всего лишь указатели на объекты, они не содержат информации о типе.

# В Python есть несколько стандартных типов данных:

# - Numbers (числа)
# - Strings (строки)
# - Lists (списки)
# - Dictionaries (словари)
# - Tuples (кортежи)
# - Sets (множества)
# - Boolean (логический тип данных)

# Эти типы данных можно, в свою очередь, классифицировать по нескольким признакам:

# - изменяемые (списки, словари и множества)
# - неизменяемые (числа, строки и кортежи)
# - упорядоченные (списки, кортежи, строки и словари)
# - неупорядоченные (множества)

# Изменяемые и неизменяемые типы данных
# Типы данных в Python можно разделить на изменяемые и неизменяемые.

####################################### 
# Изменяемые и неизменяемые типы данных

# Когда мы присваиваем новое значение неизменяемому объекту, Python не перезаписывает его, а создаёт новый объект с тем же именем. 
# Чтобы в этом убедиться, достаточно проверить id — уникальный номер, который присваивается каждому объекту в Python:
int_obj = 10
print("id of int_obj: ", id(int_obj)) #140717895746096
int_obj += 5
print("id of int_obj: ", id(int_obj)) #140717895746256
# Когда мы прибавляем 5 к переменной int_obj, на её месте создаётся новый объект с тем же именем. Заметьте: при первом выводе id равен 140717895746096, а после выполнения операции сложения — 140717895746256.

# А вот идентификатор списка list_obj не меняется, потому что списки в Python — это изменяемые объекты:
list_obj = [10, 20, 30]
print("id of list_obj: ", id(list_obj)) #2302150079496
list_obj += [40]
print("id of list_obj: ", id(list_obj)) #2302150079496
# К неизменяемым объектам относятся числа, строки и кортежи, а к изменяемым — списки, словари и множества. 
# Это свойство нужно учитывать при передаче объектов в функцию. 
# Например, если вы не хотите, чтобы функция изменила исходный список, передайте в неё копию этого списка.

############################################
# Какие встроенные типы данных есть в Python

# В недрах интерпретатора Python зашито много типов данных. Их можно разделить на три группы:
# Простые — числа и строки.
# Коллекции — списки, кортежи и словари.
# Остальные — файлы, итераторы, сокеты, NaN.